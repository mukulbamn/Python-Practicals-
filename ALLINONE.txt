1st---------------------------------------------------------


print("Program to calculate the area and perimeter of a triangle !")
ch="Y"
while ch=="Y" or ch=="y":
    a,b,c=map(int, input("Enter 3 sides : ").split())
    if a+b<=c or a+c<=b or b+c<=a:
        print("Not a Triangle, because the sum of two any sides must be greater than the third ! ")
        
    else :
        
        s=(a+b+c)/2
        t=((s*(s-a)*(s-b)*(s-c))**0.5,(a+b+c))
        print("","AREA :",t[0],"\nPERIMETER :",t[1])
    ch=input("Do you want to continue ? \n(Y)es or (N)o\n")




2nd---------------------------------------------------



def calc(sale1, sale2, sale3, sale4):
    total_sales = sale1+sale2+sale3+sale4
    com_amt = 0 #Commission
    if total_sales >= 50000:
        com_amt = total_sales*0.05
    remarks = ""
    if total_sales >= 80000:
        remarks = "Excellent"
    elif total_sales >= 60000:
        remarks = "Good"
    elif total_sales >= 40000:
        remarks = "Average"
    elif total_sales < 40000:
        remarks = "Work Hard"

    return total_sales, com_amt, remarks

if __name__ == "__main__":
    sale1 = int(input("Enter the sales for week 1: "))
    sale2 = int(input("Enter the sales for week 2: "))
    sale3 = int(input("Enter the sales for week 3: "))
    sale4 = int(input("Enter the sales for week 4: "))
    t_sales, comm, remarks = calc(sale1, sale2, sale3, sale4)

    print("Total Sales: Rs." ,t_sales)
    print("Commission: Rs.",comm)
    print("Remarks:", remarks)

    

3rd----------------------------------------------

# Factorial function to find factorial of a number
def factorial(n):
    if n <= 1:
        return 1
    return n*factorial(n-1)

# Fibonacci function to find nth term of series
def fib(n): #Recursive
    if n <= 0:
        return 0
    if n == 1:
        return 1
    return fib(n-1) + fib(n-2)

# def fib(n): #Iterative
#     pnum = 0
#     ppnum = 0
#     cnum = 1
#     for i in range(n):
#         ppnum = pnum
#         pnum = cnum
#         cnum = pnum + ppnum
#     return cnum

# Main 
if __name__ == "__main__":
    num =  int(input("Enter a number: "))
    print("{}th term of fibonacci series: ".format(num), fib(num))
    print("Factorial of {}: ".format(num), factorial(num))


4th--------------------------------------------------------


# Input
num = int(input("Enter a number greater than or equal to 10: "))

if num >= 10: #Check if num satisfies condtn.
    _set = set() #Create empty set
    while num != 0:
        _set.add(num%10)
        num = int(num/10)
    print("Set: ", _set)
else:
    print("Oops! Number is less than 10")
    
    
    
    5th-------------------------------------------------------------------
    
    
    # Importing factorial function created previously
from ques_3 import factorial

# Function to find sum of given series
def sum_series(x, n):
    sum = 0
    for i in range(1, n+1, 1):
        term = ((-1)**(i+1))*(x**(2*i-2)/factorial(2*i-2)) #Calculating nth term
        sum += term
    return sum

if __name__ == "__main__":
    n = int(input("Enter n: "))
    x = int(input("Enter x: "))
    sum = sum_series(x, n)
    print("\nSum of {} terms of series for x={}: {}".format(n, x, sum))
    
    
    
    
    
    6th----------------------------------------------------------
    
    
    
    # Tuple t1
t1 = (1,2,5,7,9,2,4,6,8,10)
print("Given tuple: ", t1)

# Another tuple with even values of t1
t_even = ()
for i in range(0, len(t1), 1):
    if t1[i] % 2 == 0:
        t_even += (t1[i],)
print("New tuple with even values: ", t_even)

# Concatenate t2 with t1
t2 = (11, 13, 15)
t3 = t1 + t2
print("Concatented tuple: ", t3)

# Maximum and minimum values from concatenated tuple
maximum = t3[0]
minimum = t3[0]
for i in range(0, len(t3), 1):
    if t3[i] > maximum:
        maximum = t3[i]
    if t3[i] < minimum:
        minimum = t3[i]
print("Maximum: ", maximum)
print("Minimum: ", minimum)





7th------------------------------------------------------------------------------------------



# Check if all elements of list are numbers or not
def check_int(l):
    for i in range(0, len(l),1):
        if not l[i].isnumeric():
            return False
    return True

# If it is a numeric list, then count number of odd values
def count_odd(l):
    if check_int(l):
        count = 0
        for i in range(0,len(l),1):
            if int(l[i]) % 2 != 0:
                count += 1
        print("Count of odd numbers: ", count)

# If list contains all strings, then display largest string in the list 
def largest_str(l):
    flag = True
    for i in range(0, len(l), 1):
        if type(l[i]) != str:
            flag = False
            
    if flag:
        largest = l[0]
        for i in l:
            if len(i) > len(largest):
                largest = i
        print("Largest string: ", largest)
    else:
        print("List does not contain all strings!") 

# Display list in reverse form
def display_reverse(l):
    for i in range(len(l)-1, -1, -1):
        print(l[i], end=" ")
    return

# Find a specific item in the list
def find_item(l):
    item = input("\nEnter an element: ")
    for i in range(0, len(l), 1):
        if item == l[i]:
            print("Item found at index: ", i)
            return
    print("Item not found")

# Remove the specified item in the list
def remove_item(l):
    item = input("\nEnter an element: ")
    for i in range(0, len(l), 1):
        if item == l[i]:
            l.remove(item)
            print("Item removed")
    return

# Sort the list in descending order
def sort_desc(l):
    print(sorted(l, reverse=True))
    return
    
# Accept two list and find common members in them
def common(l1, l2):
    common = []
    for i in range(0, len(l1), 1):
        for j in range(0, len(l2), 1):
            if l1[i] == l2[j]:
                common.append(l1[i])
    if common:
        print("Common elements: ", common)
    else:
        print("No common element")
    return
    
def main(l):
    print("\nMenu")
    print("-"*20)
    print("1. Check if all elements are numbers")
    print("2. Count odd numbers if list is numeric")
    print("3. Display largest string in list")
    print("4. Reverse the list")
    print("5. Find item in list")
    print("6. Remove item from list")
    print("7. Sort in Descending order")
    print("8. Find common elements from another list")
    print("9. Exit")
    print("-"*20)
    option = input("Your choice: ")
    switcher = {
        '2' : count_odd,
        '3' : largest_str,
        '4' : display_reverse,
        '5' : find_item,
        '6' : remove_item,
        '7' : sort_desc,
        '8' : common,
        '9' : quit
    }
    if option == '1':
        if check_int(l):
            print("All elements are numbers")
        else:
            print("All elements are not numbers")
    elif option == '8':
        l2 = []
        n = int(input("Enter the size of new list: "))
        for i in range(0, n, 1):
            l2.append(input("Enter element: "))
        common(l, l2)
    else:
        func = switcher.get(option, lambda: print("Invalid Choice!"))
        func(l)

if __name__ == "__main__":
    l = []
    n = int(input("Enter the size of list: "))
    for i in range(0, n,1):
        l.append(input("Enter element: "))
    ch = 'y'
    while ch.lower() == 'y':
        main(l)
        ch = input("\nWant to continue? [y/n]: ")
        
        
        
        
9th------------------------------------------------------------------------------


'''
9. Use dictionary to store marks of the students in 4 subjects. 
Write a function to find the name of the student securing highest percentage. 
(Hint: Names of students are unique).
'''

def findTopStudent(marks):
    name = ''
    percentage = 0.0
    for student in marks:
        marks_list = marks[student]
        total = 0.0
        for i in range(0, len(marks_list), 1):
            total += marks_list[i]
        if percentage < total/4:
            percentage = total/4
            name = student
    return name

if __name__ ==  "__main__":
    marks = {}
    num = int(input('Enter the no. of students: '))
    for i in range(1, num+1, 1):
        name = input('\nEnter the name of Student {}: '.format(i))
        temp = []
        for j in range(1, 5, 1):
            mark = float(input('Marks in Subject {}(out of 100): '.format(j)))
            temp.append(mark)
        marks[name] = temp

    topper = findTopStudent(marks)
    print('\n{} secured the highest percentage.'.format(topper))


10--------------------------------------------------------------------------------



'''
10. Write a function that takes a sentence as input from the user and calculates
the frequency of each letter. 
Use a variable of dictionary type to maintain the count.

'''

def calcFreqOfLetters(sentence):
    freq = {}
    for i in range(0, len(sentence), 1):
        letter = sentence[i].lower()
        if letter not in [' ', '.', ',', '\'', '\"', '!', ';']:
            if letter in freq.keys():
                freq[letter] += 1
            else:
                freq[letter] = 1
    return freq

if __name__ == "__main__":
    sentence = input('\nEnter a sentence:\n')
    freq = calcFreqOfLetters(sentence)
    
    print('\nFrequencies of each letter in the given sentence: ')
    for letter in freq:
        print('\'{}\' --> {}'.format(letter, freq[letter]))




    
    
    
    11---------------------------------------------------------------------------------
    
    
    '''
11 . Write a menu-driven program to accept a list of student names and perform the following
a. search an element using linear search/ binary search.
b. Sort the elements using bubble sort/ insertion sort/ selection sort.

'''

def bubbleSort(list):
    for i in range(0, len(list)-1, 1):
        for j in range(0, len(list) - i - 1, 1):
            if list[j] > list[j+1]:
                temp = list[j]
                list[j] = list[j+1]
                list[j+1] = temp
    return list

def insertionSort(list):
    for i in range(0, len(list), 1):
        temp = list[i]
        j = i - 1
        while j >= 0 and list[j] > temp:
            list[j+1] = list[j]
            j -= 1
        list[j+1] = temp
    return list

def selectionSort(list):
    for i in range(0, len(list)-1, 1):
        minIndex = i
        for j in range(i+1, len(list), 1):
            if list[minIndex] > list[j]:
                minIndex = j
        temp = list[minIndex]
        list[minIndex] = list[i]
        list[i] = temp
    return list

def linearSearch(list, element):
    for i in range(0, len(list), 1):
        if list[i].lower() == element.lower():
            return i
    return -1

def binarySearch(list, element):
    list = selectionSort(list)
    low = 0
    high = len(names) - 1
    while low <= high:
        mid = int(low + (high - low) / 2)
        if (list[mid] == element):
            return mid
        if (list[mid] > element):
            high = mid - 1
        else:
            low = mid + 1
    return -1

if __name__ == "__main__":
    num = int(input('\nEnter the number of students: '))
    print('Enter the names of students:')
    names = []
    for i in range(0, num, 1):
        names.append(input('{}: '.format(i+1)))
    
    choice = 'y'
    while choice.lower() == 'y':
        print('\n-------- Menu --------')
        print('1. Search a name')
        print('2. Sort the list of names')
        choice = input('Your Choice: ')
        if choice == '1':
            name = input('\nEnter a name to search: ')
            choice = input('Choose a searching algorithm:\n1. Linear, 2. Binary: ')
            index = -1
            if choice == '1':
                index = linearSearch(names, name)
            elif choice == '2':
                index = binarySearch(names, name)
            else:
                print('Invalid Choice!') 
            if index == -1:
                print('Name is not in the list.')
            else:
                print('Name found in the list.')
        elif choice == '2':
            choice = input('Choose a sorting algorithm:\n1. Bubble, 2. Insertion, 3. Selection: ')
            sorted_names = []
            if choice == '1':
                sorted_names = bubbleSort(names)
            elif choice == '2':
                sorted_names = insertionSort(names)
            elif choice == '3':
                sorted_names = selectionSort(names)
            else:
                print('Invalid Choice!') 
            print('Sorted list: ', end='')
            for i in range(0, len(sorted_names), 1):
                print('\'{}\''.format(sorted_names[i]), end=' ')
            print('')
        else:
            print('Invalid Choice!')
        
        choice = input('\nWould you like to continue? (y/n): ')





12..................................................------------------------------



'''
    12. Write a program that makes use of a function to accept a list of n integers and displays a histogram.
    
'''

import matplotlib.pyplot as plt

def inputList():
    '''
    To take a input of list of integers from user
    Returns the list
    '''
    ls = []
    length = int(input('Enter the length of list: '))
    for i in range(0, length, 1):
        ls.append(int(input('Enter element {}:'.format(i+1))))
    # Using eval
    # ls = eval(input('Enter the integers: '))
    return ls

if __name__ == "__main__":

    list = inputList()
    plt.hist(list, )
    plt.xlabel('Integer')
    plt.ylabel('Frequency')
    plt.title('Histogram')
    plt.savefig('hist.png', dpi=275, bbox_inches='tight') # To save the plot
    plt.show()

    
13-------------------------------------------------------------------------



'''
    13. Write a program that makes use of a function to display sine, cosine, polynomial and exponential curves.
    
'''

import matplotlib.pyplot as plt
import math

def sineCurve():
    '''
    To plot sine function
    '''

    plt.subplot(2, 2, 1)
    degrees = range(0, 360 + 1)
    sinValues = [math.sin(math.radians(i)) for i in degrees]
    plt.plot(sinValues)
    plt.xlabel('Degrees')
    plt.ylabel('Sin Values')
    plt.title('Sine Curve')
    plt.grid()

def cosineCurve():
    '''
    To plot cos function
    '''

    plt.subplot(2, 2, 3)
    degrees = range(0, 360 + 1)
    cosValues = [math.cos(math.radians(i)) for i in degrees]
    plt.plot(degrees, cosValues)
    plt.xlabel('Degrees')
    plt.ylabel('Cosine Values')
    plt.title('Cosine Curve')
    plt.grid()

def polynomialCurve():
    '''
    To plot a polynomial function
    '''
    def polynomial(x):
        return (8*x*x)
    plt.subplot(2, 2, 2)
    x = range(-51, 50 + 2)
    y = [polynomial(i) for i in x]
    plt.plot(x, y)
    plt.xlabel('x')
    plt.ylabel('y = 8x^2')
    plt.title('Polynomial Curve')
    plt.grid()

def expCurve():
    '''
    To plot sine function
    '''

    plt.subplot(2, 2, 4)
    x = []
    for i in range(0, 100*10):
        x.append((-5) + (0.01)*i)
    y = [math.exp(i) for i in x]
    plt.plot(x, y)
    plt.xlabel('x')
    plt.ylabel('y = e^x')
    plt.title('Exponetial Curve')
    plt.grid()

if __name__ == "__main__":
    plt.figure(figsize=(9, 5)) # To set the figure size
    sineCurve()
    cosineCurve()
    polynomialCurve()
    expCurve()
    plt.tight_layout()
    plt.savefig('plot.png', dpi=275, bbox_inches='tight') # To save the plot
    plt.show()
    




14-----------------------------------------------------------------------------------



'''
14. Write a function that reads a file file1 and copies only alternative lines to another file file2. 
Alternative lines copied should be the odd numbered lines. Use Exception.

'''

def  copyOddNumberedLines(file_in, file_out):
    print("\nCopying alternate lines from \'{}\' to \'{}\'...".format(file_in, file_out))
    try:
        fh_in = open(file_in, 'r')
        fh_out = open(file_out, 'w')
        lines = fh_in.readlines()
        for i in range(0, len(lines), 2):
            fh_out.write(lines[i])
        print('Done!\n')
    except FileNotFoundError:
        print('Error: \'{}\' not found.\n'.format(file_in))

if __name__ == "__main__":

    copyOddNumberedLines('file1.txt', 'file2.txt')


---------------file 1 ------------

Practical - 14
Written By Mukul Sharma
College Roll No - 21/18045
Paper - Programming with Python
B.Sc.(Hons) Computer Science, Semester III
Atma Ram Sanatan Dharma College
University of Delhi


-------file 2----------------
Practical - 14
College Roll No - 19/78065
B.Sc.(Hons) Computer Science, Semester III
University of Delhi



-----15th------------------------------------------------------



'''
15. Define a class Student to store his/ her name and marks in three subjects.
Use a class variable to store the maximum average marks of the class. 
Use constructor and destructor to initialize and destroy the objects.

'''

class Student:
    # Class Variable
    max_avg = 0

    # Constructor
    def __init__(self, name='', marks=[0, 0, 0]):
        self.name = name
        self.marks = marks

    # Destructor
    def __del__(self):
        del self.name
        del self.marks
        del self

    def __str__(self):
        str = '\nMarks: {}\n'.format(self.name)
        str += '------------------\n'
        str += 'Subject 1: {}\n'.format(self.marks[0])
        str += 'Subject 2: {}\n'.format(self.marks[1])
        str += 'Subject 3: {}\n'.format(self.marks[2])
        str += 'Average: {:.2f}'.format(self.calcAvg())
        return str

    def calcAvg(self):
        total = 0.0
        for i in range(0, 3, 1):
            total += self.marks[i]
        return total/3

if __name__ == "__main__":

    students = []
    num = int(input('\nEnter the no. of students: '))
    for i in range(1, num+1, 1):
        name = input('\nEnter the name of Student {}: '.format(i))
        marks = []
        for j in range(1, 4, 1):
            marks.append(float(input('Marks in Subject {}: '.format(j))))
        
        student = Student(name, marks)
        if Student.max_avg < student.calcAvg():
            Student.max_avg = student.calcAvg()
        students.append(student)
    
    for i in range(0, len(students), 1):
        print(students[i])
    
    print('\nMaximum average marks of class: {:.2f}\n'.format(Student.max_avg))
    








    